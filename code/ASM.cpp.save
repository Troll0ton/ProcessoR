#include "../include/ASM.h"
#include "../include/lines_handle.h"
#include "../include/input_output.h"

//-----------------------------------------------------------------------------

int main()
{
    assembler ();

    return 0;
}

//-----------------------------------------------------------------------------

void assembler ()
{
    Asm_data_ *Asm_data = (Asm_data_*) calloc (1, sizeof (Asm_data_));

    Asm_data_ctor (Asm_data);

    code_ctor (Asm_data);

    fclose (Asm_data->file_in);
    fclose (Asm_data->code_file);
}
j

//-----------------------------------------------------------------------------

void handle_label (Asm_data_ *data)
{
    int label = -1;
    int label_adr = data->res_sum;

    if(sscanf (data->Cur_line.begin_line, ":%d", &label) != 0)
    {
        if(label > data->num_of_labels)
        {
            data->num_of_labels = label;
        }

        fseek  (data->label_file, sizeof(int) * label, SEEK_SET);
        fwrite (&label_adr, sizeof(int), 1, data->label_file);
    }

    else
    {
        printf ("ERROR");
    }
}

//-----------------------------------------------------------------------------

void handle_jump (Asm_data_ *data)
{
    int val = -1;

    fwrite (&Cmd_asm[CMD_JUMP].num, sizeof(int), 1, data->code_file);

    if(sscanf (data->Cur_line.begin_line + 5, "%d:", &val) != 0)
    {
        fwrite (&val, sizeof(int), 1, data->code_file);

        data->res_sum += 2;
    }

    else
    {
        printf ("ERROR");
    }
}

//-----------------------------------------------------------------------------

void label_utility (Asm_data_ *data, char *cmd_)
{
    if(stricmp (cmd_, "jump") == 0)
    {
        handle_jump (data);
    }

    else
    {
        handle_label (data);
    }
}

//-----------------------------------------------------------------------------

bool found_label (Asm_data_ *data)
{
    if(strchr (data->Cur_line.begin_line, ':') != NULL)
    {
        return true;
    }

    return false;
}

//-----------------------------------------------------------------------------

bool found_arg_funct (char *cmd_)
{
    if(stricmp (cmd_, "push") == 0)
    {
        return true;
    }

    return false;
}

//-----------------------------------------------------------------------------

void handle_arg_functs (Asm_data_ *data)
{
    char arg[100] = "";

    double val = -1;

    if(sscanf (data->Cur_line.begin_line + 5, "%lg", &val))
    {
        fwrite (&Cmd_asm[CMD_PUSH].num, sizeof(int), 1, data->code_file);
        fwrite (&val, sizeof(double), 1, data->code_file);
    }

    else
    {
        sscanf (data->Cur_line.begin_line + 5, "%s", arg);

        handle_regs (data, arg);

        handle_ram_args (data, arg);
    }

    data->res_sum += 2;
}

//-----------------------------------------------------------------------------

void handle_regs (Asm_data_ *data, char *arg_)
{
    if(arg_[0] == 'r' && arg_[2] == 'x')
    {
        int num_of_reg = arg_[1] - 97;

        fwrite (&Cmd_asm[CMD_RG_PUSH].num, sizeof(int), 1, data->code_file);
        fwrite (&num_of_reg, sizeof(int), 1, data->code_file);
    }
}

//-----------------------------------------------------------------------------

void handle_ram_args (Asm_data_ *data, char *arg_)
{
    if(arg_[0] == '[')
    {
        int num_of_rmarg = -1;

        if(sscanf (data->Cur_line.begin_line + 6, "%d", &num_of_rmarg))
        {
            fwrite (&Cmd_asm[CMD_RM_PUSH].num, sizeof(int), 1, data->code_file);
            fwrite (&num_of_rmarg, sizeof(int), 1, data->code_file);
        }
    }
}

//-----------------------------------------------------------------------------

void handle_com_functs (Asm_data_ *data, char *cmd_)
{
    for(int num_cmd = 0; num_cmd < num_sup_cmd; num_cmd++)
    {
        if(stricmp (cmd_, Cmd_asm[num_cmd].name) == 0)
        {
            fwrite (&Cmd_asm[num_cmd].num, sizeof(int), 1, data->code_file);
            data->res_sum++;
        }
    }
}

//-----------------------------------------------------------------------------

void Asm_data_ctor (Asm_data_ *data)
{
    data->file_in    = fopen ("../files/file1.txt",  "rb");
    data->code_file  = fopen ("../files/code.txt",   "wb");
    data->label_file = fopen ("../files/labels.txt", "wb");

    data->res_sum = 0;
    data->num_of_labels = 0;
}

//-----------------------------------------------------------------------------